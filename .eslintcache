[{"/app/src/index.js":"1","/app/src/components/main/Main.js":"2","/app/src/components/bucket/BucketDetails.js":"3","/app/src/reportWebVitals.js":"4","/app/src/components/Navbar/Navbar.js":"5","/app/src/utils/Constants.js":"6","/app/src/App.js":"7"},{"size":589,"mtime":1612175740540,"results":"8","hashOfConfig":"9"},{"size":4648,"mtime":1611935330661,"results":"10","hashOfConfig":"9"},{"size":1684,"mtime":1611842882722,"results":"11","hashOfConfig":"9"},{"size":362,"mtime":1611823332406,"results":"12","hashOfConfig":"9"},{"size":244,"mtime":1611823332404,"results":"13","hashOfConfig":"9"},{"size":116,"mtime":1611841539390,"results":"14","hashOfConfig":"9"},{"size":567,"mtime":1611934562630,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"swxeug",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/app/src/index.js",[],"/app/src/components/main/Main.js",["34"],"import React, { useState, useEffect } from \"react\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\nimport { API, Token } from \"../../utils/Constants\";\n\nlet schema = Yup.object().shape({\n  name: Yup.string().required(),\n  location: Yup.string().required(),\n});\n\nexport default function Main() {\n  const [loading, setLoading] = useState(false);\n  const [showCreateBucketForm, setShowCreateBucketForm] = useState(false);\n  const [buckets, setBuckets] = useState([]);\n  const { register, handleSubmit, errors } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = (data) => {\n    console.log(data);\n    fetch(`${API}/buckets`, {\n      method: \"post\",\n      headers: {\n        Authorization: `Token ${Token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((response) => {\n        console.log(response.status); // Will show you the status\n        if (!response.ok) {\n          throw new Error(\"HTTP status \" + response.status);\n        }\n        return response.json();\n      })\n      .then((datas) => {\n        console.log(datas);\n        buckets.unshift(datas.bucket);\n      });\n\n    setShowCreateBucketForm(false);\n  };\n\n  useEffect(() => {\n    fetch(\n      `${API}/buckets`,\n      {\n        method: \"get\",\n        headers: {\n          Authorization: `Token ${Token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      },\n      setLoading(true)\n    )\n      .then((response) => response.json())\n      .then((datas) => {\n        setLoading(false);\n        console.log(datas);\n        setBuckets(datas.buckets);\n      });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-left\">Bucket List</h1>\n      {showCreateBucketForm ? (\n        <div>\n          <h5 className=\"text-left pt-3\">Create New Bucket</h5>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"row\">\n              <div className=\"col\">\n                <label className=\"text-left\">Bucket Name*</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Bucket Name\"\n                  name=\"name\"\n                  ref={register}\n                />\n                {errors.name && (\n                  <small id=\"name\" className=\"form-text text-danger\">\n                    {errors.name.message}\n                  </small>\n                )}\n              </div>\n              <div className=\"col\">\n                <label className=\"text-left\">Bucket Location*</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Bucket Location\"\n                  name=\"location\"\n                  ref={register}\n                />\n                {errors.location && (\n                  <small id=\"location\" className=\"form-text text-danger\">\n                    {errors.location.message}\n                  </small>\n                )}\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-start py-3\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Create Bucket\n              </button>\n            </div>\n          </form>\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div className=\"row pt-3 d-flex justify-content-between\">\n        <h5>All Buckets(2)</h5>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => setShowCreateBucketForm(true)}\n        >\n          Create New Bucket\n        </button>\n      </div>\n      <div className=\"row py-5\">\n        <table className=\"table\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Location</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {buckets.length > 0 ? (\n              buckets.map((bucket) => (\n                <tr key={bucket.id}>\n                  <td>\n                    <Link to={`/buckets/${bucket.id}`}>{bucket.name}</Link>{\" \"}\n                  </td>\n                  <td>\n                    <Link to={`/buckets/${bucket.id}`}>\n                      {bucket.location.name}\n                    </Link>{\" \"}\n                  </td>\n                </tr>\n              ))\n            ) : (\n              <div className=\"d-flex justify-content-center text-center\">\n                <strong>Loading...</strong>\n              </div>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n",["35","36"],"/app/src/components/bucket/BucketDetails.js",[],"/app/src/reportWebVitals.js",[],["37","38"],"/app/src/components/Navbar/Navbar.js",["39"],"import React from \"react\";\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Secure cloud storage\n      </a>\n    </nav>\n  );\n}\n","/app/src/utils/Constants.js",[],"/app/src/App.js",["40"],{"ruleId":"41","severity":1,"message":"42","line":14,"column":10,"nodeType":"43","messageId":"44","endLine":14,"endColumn":17},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"45","replacedBy":"49"},{"ruleId":"47","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":6,"column":7,"nodeType":"53","endLine":6,"endColumn":44},{"ruleId":"41","severity":1,"message":"54","line":1,"column":8,"nodeType":"43","messageId":"44","endLine":1,"endColumn":12},"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["55"],"no-negated-in-lhs",["56"],["55"],["56"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'logo' is defined but never used.","no-global-assign","no-unsafe-negation"]